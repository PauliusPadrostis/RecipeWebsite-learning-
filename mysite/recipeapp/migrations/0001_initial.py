# Generated by Django 5.0.1 on 2024-01-13 08:33

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('storage_type_category', models.CharField(blank=True, max_length=100, null=True, verbose_name='Grocery category')),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Country')),
            ],
        ),
        migrations.CreateModel(
            name='GroceryItemMeasurement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('measurement_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Measurements')),
            ],
        ),
        migrations.CreateModel(
            name='IngredientMeasurement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ingredient_measurement_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Measurements')),
            ],
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipe_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Recipe name')),
                ('cooking_time', models.FloatField(verbose_name='Cooking time')),
                ('servings', models.FloatField(verbose_name='Servings')),
                ('cuisine_tag', models.CharField(blank=True, choices=[('I', 'Italian'), ('M', 'Mexican'), ('C', 'Chinese'), ('In', 'Indian'), ('G', 'Greek'), ('T', 'Thai'), ('Med', 'Mediterranean'), ('F', 'French'), ('J', 'Japanese'), ('A', 'American')], default='', max_length=3)),
                ('dietary_tag', models.CharField(blank=True, choices=[('V', 'Vegetarian'), ('VG', 'Vegan'), ('GF', 'Gluten-Free'), ('DF', 'Dairy-Free'), ('NF', 'Nut-Free'), ('LC', 'Low-Carb'), ('K', 'Keto'), ('P', 'Paleo')], default='', max_length=3)),
                ('meal_type_tag', models.CharField(blank=True, choices=[('B', 'Breakfast'), ('L', 'Lunch'), ('D', 'Dinner'), ('S', 'Snack'), ('DE', 'Dessert'), ('A', 'Appetizer'), ('SD', 'Side Dish'), ('MC', 'Main Course'), ('SL', 'Salad')], default='', max_length=3)),
                ('course_tag', models.CharField(blank=True, choices=[('S', 'Soup'), ('SD', 'Salad'), ('P', 'Pasta'), ('R', 'Rice'), ('C', 'Curry'), ('SF', 'Stir-Fry'), ('G', 'Grilled'), ('RO', 'Roasted'), ('B', 'Baked'), ('SC', 'Slow Cooker')], default='', max_length=3)),
                ('occasion_tag', models.CharField(blank=True, choices=[('H', 'Holiday'), ('P', 'Party'), ('PI', 'Picnic'), ('PL', 'Potluck'), ('QE', 'Quick & Easy'), ('WN', 'Weeknight'), ('DN', 'Date Night')], default='', max_length=3)),
                ('ingredient_based_tag', models.CharField(blank=True, choices=[('CH', 'Chicken'), ('B', 'Beef'), ('SEA', 'Seafood'), ('V', 'Vegetables'), ('TO', 'Tofu'), ('Q', 'Quinoa'), ('AV', 'Avocado'), ('SP', 'Sweet Potato')], default='', max_length=3)),
                ('flavor_tag', models.CharField(blank=True, choices=[('SP', 'Spicy'), ('SW', 'Sweet'), ('SAV', 'Savory'), ('T', 'Tangy'), ('CR', 'Creamy'), ('GA', 'Garlicky'), ('CI', 'Citrusy'), ('HE', 'Herby')], default='', max_length=3)),
                ('seasonal_tag', models.CharField(blank=True, choices=[('SU', 'Summer'), ('FA', 'Fall'), ('WI', 'Winter'), ('SP', 'Spring')], default='', max_length=3)),
                ('regional_tag', models.CharField(blank=True, choices=[('SO', 'Southern'), ('NO', 'Northern'), ('CO', 'Coastal'), ('MO', 'Mountain'), ('TR', 'Tropical'), ('DE', 'Desert')], default='', max_length=3)),
                ('skill_tag', models.CharField(blank=True, choices=[('BF', 'Beginner-Friendly'), ('I', 'Intermediate'), ('A', 'Advanced'), ('QE', 'Quick & Simple')], default='', max_length=3)),
                ('allergy_tag', models.CharField(blank=True, choices=[('NF', 'Nut-Free'), ('GF', 'Gluten-Free'), ('DF', 'Dairy-Free'), ('EF', 'Egg-Free'), ('SF', 'Soy-Free')], default='', max_length=3)),
                ('special_tag', models.CharField(blank=True, choices=[('K', 'Keto'), ('P', 'Paleo'), ('W30', 'Whole30'), ('LC', 'Low-Calorie'), ('HP', 'High-Protein'), ('LF', 'Low-Fat')], default='', max_length=3)),
                ('prepmeth_tag', models.CharField(blank=True, choices=[('G', 'Grilled'), ('RO', 'Roasted'), ('B', 'Baked'), ('ST', 'Steamed'), ('SC', 'Slow Cooker'), ('IP', 'Instant Pot')], default='', max_length=3)),
                ('trend_tag', models.CharField(blank=True, choices=[('PB', 'Plant-Based'), ('SF', 'Superfood'), ('FU', 'Fusion'), ('GO', 'Gourmet'), ('SI', 'Street Food-Inspired')], default='', max_length=3)),
            ],
        ),
        migrations.CreateModel(
            name='StorageType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('storage_type_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Storage type')),
            ],
        ),
        migrations.CreateModel(
            name='GroceryStoreItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Name')),
                ('brand', models.CharField(blank=True, max_length=100, null=True, verbose_name='Brand')),
                ('packaging', models.CharField(blank=True, max_length=100, null=True, verbose_name='Brand')),
                ('net_weight', models.FloatField(blank=True, null=True, verbose_name='Net weight (g/ml)')),
                ('price_per_item', models.FloatField(verbose_name='Item price')),
                ('price_per_uom', models.FloatField(verbose_name='Price per kg/l')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='recipeapp.category')),
                ('country_of_origin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='recipeapp.country')),
                ('unit_of_measurement', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='recipeapp.groceryitemmeasurement')),
                ('storage_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='recipeapp.storagetype')),
            ],
        ),
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(verbose_name='Amount')),
                ('grocery_store_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='recipeapp.grocerystoreitem')),
                ('ingredient_measurement', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='recipeapp.ingredientmeasurement')),
            ],
        ),
        migrations.CreateModel(
            name='NutritionalValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('calories', models.FloatField(verbose_name='Calories per 100 g/ml')),
                ('fat', models.FloatField(verbose_name='Fat')),
                ('sat_fat', models.FloatField(verbose_name='Saturated Fat')),
                ('carbs', models.FloatField(verbose_name='Carbs')),
                ('sugar', models.FloatField(verbose_name='Sugar')),
                ('protein', models.FloatField(verbose_name='Protein')),
                ('salt', models.FloatField(verbose_name='Salt')),
                ('grocery_store_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='recipeapp.grocerystoreitem')),
            ],
        ),
        migrations.CreateModel(
            name='RecipeIngredient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ingredient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='recipeapp.ingredient')),
                ('recipe', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='recipeapp.recipe')),
            ],
        ),
        migrations.CreateModel(
            name='RecipeInstruction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('step_nr', models.FloatField(verbose_name='Step Nr.')),
                ('instruction', models.TextField(blank=True, max_length=1000, null=True, verbose_name='Instruction')),
                ('recipe', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='recipeapp.recipe')),
            ],
        ),
    ]
